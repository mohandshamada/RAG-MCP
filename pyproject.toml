[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pdf-rag-mcp-server"
version = "1.0.0"
description = "Model Context Protocol server for multi-format document processing with RAG. Supports PDF, Excel, Word, and Images with semantic search capabilities."
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Mohammed Shousha", email = "engmohammedalkotb@gmail.com"}
]
keywords = ["mcp", "rag", "document-processing", "semantic-search", "vector-database"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business",
]

dependencies = [
    "mcp>=0.1.0",
    "PyMuPDF>=1.23.0",  # Replaces PyPDF2
    "anthropic>=0.30.0",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "langchain-huggingface>=0.0.1",  # For non-deprecated HuggingFaceEmbeddings
    "faiss-cpu>=1.7.4",
    "sentence-transformers>=2.2.0",
    "huggingface-hub>=0.16.0",
    "openpyxl>=3.1.0",
    "python-docx>=0.8.11",
    "pytesseract>=0.3.10",
    "pillow>=10.0.0",
    "tabula-py>=2.5.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.23.0",
]

gpu = [
    "faiss-gpu>=1.7.4",
]

[project.urls]
Homepage = "https://github.com/mohandshamada/RAG-MCP"
Repository = "https://github.com/mohandshamada/RAG-MCP.git"
Documentation = "https://github.com/mohandshamada/RAG-MCP#readme"
Issues = "https://github.com/mohandshamada/RAG-MCP/issues"

[project.scripts]
pdf-rag-server = "src.rag_server:main"
pdf-rag-cli = "client:main"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",
    "F",
    "W",
    "B",
    "I",
    "N",
    "UP",
    "RUF",
]
ignore = [
    "E501",  # Line too long, handled by black
    "W503",  # Line break before binary operator
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_optional = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "-v --cov=src --cov-report=term-local --cov-report=html"

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if sys.version_info",
    "^\\s*@abstractmethod",
]
